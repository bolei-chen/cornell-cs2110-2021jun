package class_06_24;

public class Recursion {

	public static int factorial(int n) {
		int product = 1;
		for (int i = 1; i <= n; i++) {
			product *= i;
		}
		return product;
	}

	public static int factorialR(int n) {
		if (n < 1) {
			return 1;
		} else {
			return n * factorialR(n - 1);
		}
	}

	public static String binaryConvertion(int n) {
		if (n > 0) {
			return (n % 2) + binaryConvertion(n / 2);
		}
		return "";
	}

	public static boolean isPalindrome(String s) {
		if (s.length() == 1) {
			return true;
		}

		char firstDigit = s.charAt(0);
		char lastDigit = s.charAt(s.length() - 1);

		if (firstDigit == lastDigit) {
			return isPalindrome(s.substring(1, s.length() - 1));

		}
		return false;
	}

	public static int fibonacchi(int n) {
		if (n == 1 || n == 2) {
			return 1;
		}

		return fibonacchi(n - 1) + fibonacchi(n - 2);
	}

	public static void main(String[] args) {
		System.out.println(factorial(4));
		System.out.println(factorialR(4));
		System.out.println(binaryConvertion(16));
		System.out.println(fibonacchi(5));

	}

}

/*
 * package class_06_24;
 * 
 * public class Recursion {
 * 
 * public static boolean isPalindromeR(String s) { return isPalindrome(s, 0); }
 * 
 * public static String to2(int n) { if (n > 0) return (n % 2) + to2(n / 2);
 * return ""; }
 * 
 * public static void stripDigits(int n) { if (n > 0) { System.out.println(n %
 * 10); stripDigits(n / 10); } }
 * 
 * public static int fact(int n) { // N! = N * (N-1) * (N-2) * ... * 1 int
 * product = 1; for (int i = 1; i <= n; i++) { product = product * i; } return
 * product; }
 * 
 * public static int factR(int n) { if (n < 1) return 1; else return n * factR(n
 * - 1); }
 * 
 * public static void main(String[] args) { String s = "341"; int i =
 * Integer.parseInt(s); System.out.println(i); //
 * System.out.println(isPalindrome("abba")); }
 * 
 * public static boolean isPalindrome(String s) { return isPalindrome(s, 0);
 * 
 * 
 * }
 * 
 * 
 * public static boolean isPalindrome(String s, int i) { if (i < s.length() / 2)
 * if (s.charAt(i) == s.charAt(s.length() - i - 1)) return isPal
 */